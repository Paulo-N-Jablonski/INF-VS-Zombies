#include "raylib.h"
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>
#include <string.h>
#include <math.h>

#define LINHAS 5
#define COLUNAS 9
#define ALTURA_GRADE 72
#define LARGURA_GRADE 96
#define MAX_PLANTAS 90
#define MAX_ZUMBIS 100
#define MAX_PROJETEIS 1000
#define MAX_SOIS 30
#define MAX_INPUT_CHARS 9
#define MAX_JOGADORES 5
#define LIMITE_TOTAL_JOGADORES 100
#define MAX_HORDAS 3

typedef enum
{
    MENU,
    JOGANDO,
    PAUSADO,
    TABELA_LIDER,
    FIM_DE_JOGO
} GameState;
GameState currentState = MENU;

typedef enum
{
    NENHUMA,
    PEASHOOTER,
    SUNFLOWER
} TipoPlantas;

typedef struct
{
    char nome[10];
    int pontos;
} Jogador;

typedef struct Plantas
{
    Vector2 posicao;
    TipoPlantas tipo;
    float tempoDisparoSol;
    bool estaViva;
} Plantas;

Plantas plantas[MAX_PLANTAS];
int numeroPlantas = 0;

typedef struct Projeteis
{
    Vector2 posicao;
    float velocidade;
    int linhaSpawn;
    int dano;
    bool atingiu;
    bool ativa;
} Projeteis;

Projeteis projeteis[MAX_PROJETEIS];
int numeroProjeteis = 0;

typedef struct Zumbis
{
    Vector2 posicao;
    int linhaSpawn;
    float velocidade;
    int vida;
    bool estaVivo;
} Zumbis;

Zumbis zumbis[MAX_ZUMBIS];
int numeroZumbis = 0;

typedef struct Sol
{
    Vector2 posicao;
    bool ativo;
    int valor;   
    float tempoVida;
} Sol;

Sol soisNaTela[MAX_SOIS];
int numeroSoisNaTela = 0;

typedef struct Quadrados
{
    Rectangle quadrado;
    bool estaSelecionado;
    bool estaDisponivel;
} Quadrados;

Quadrados quadradosNaTela[LINHAS][COLUNAS];

int solzinho = 100;
int pontuacao = 0;
int zumbisSpawnados = 0;
bool vitoria = false;
int hordas[MAX_HORDAS] = {0};
int hordaAtual = 0;
float tempoDesdeUltimoZumbi = 0.0f;
int zumbisDaHordaAtuais = 0;
bool hordaEmAndamento = false;

void resetaJogo()
{
    int i, j;

    for (i = 0; i < COLUNAS; i++)
    {
        for (j = 0; j < LINHAS; j++)
        {
            quadradosNaTela[j][i].estaDisponivel = true;
        }
    }

    for (i = 0; i < numeroPlantas; i++)
    {
        plantas[i].estaViva = false;
    }
    numeroPlantas = 0;

    for (i = 0; i < numeroZumbis; i++)
    {
        zumbis[i].estaVivo = false;
    }
    numeroZumbis = 0;

    for (i = 0; i < numeroProjeteis; i++)
    {
        projeteis[i].ativa = false;
    }
    numeroProjeteis = 0;

    solzinho = 100;
    pontuacao = 0;
    zumbisSpawnados = 0;
    vitoria = false;
}

void desenharMenuPrincipal()
{
    ClearBackground(RAYWHITE);

    Rectangle painel = {120 - 50, 90, 360, 330};
    DrawRectangleRec(painel, (Color){200, 255, 200, 255}); // verde clarinho
    DrawRectangleLinesEx(painel, 4, DARKGREEN); // borda do painel

    DrawText("INF Vs Zombies", 145 - 50, 110, 40, DARKGREEN);

    Rectangle botaoJogar = {150 - 50, 200, 300, 50};
    if (CheckCollisionPointRec(GetMousePosition(), botaoJogar))
    {
        DrawRectangleRec(botaoJogar, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            currentState = JOGANDO;
        }
    }
    else
    {
        DrawRectangleRec(botaoJogar, LIME);
    }
    DrawRectangleLinesEx(botaoJogar, 2, DARKGREEN);
    DrawText("Jogar", 265 - 50, 210, 30, WHITE);

    Rectangle botaoTabela = {150 - 50, 270, 300, 50};
    if (CheckCollisionPointRec(GetMousePosition(), botaoTabela))
    {
        DrawRectangleRec(botaoTabela, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            currentState = TABELA_LIDER;
        }
    }
    else
    {
        DrawRectangleRec(botaoTabela, LIME);
    }
    DrawRectangleLinesEx(botaoTabela, 2, DARKGREEN);
    DrawText("Tabela de Líderes", 160 - 50, 280, 30, WHITE);

    Rectangle botaoSair = {150 - 50, 340, 300, 50};
    if (CheckCollisionPointRec(GetMousePosition(), botaoSair))
    {
        DrawRectangleRec(botaoSair, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            CloseWindow();
        }
    }
    else
    {
        DrawRectangleRec(botaoSair, LIME);
    }
    DrawRectangleLinesEx(botaoSair, 2, DARKGREEN);
    DrawText("Sair", 270 - 50, 350, 30, WHITE);

    // Créditos
    DrawText("Criador: Paulo Natã Jablonski - Turma D", 2, 590, 10, BLACK);
}

void inicializaQuadrados()
{
    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            quadradosNaTela[j][i].estaSelecionado = false;
            quadradosNaTela[j][i].estaDisponivel = true;
        }
    }
}

void checaColisaoQuadrado()
{
    Vector2 posicaoMouse = GetMousePosition();

    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            if (CheckCollisionPointRec(posicaoMouse, quadradosNaTela[j][i].quadrado))
            {
                if (quadradosNaTela[j][i].estaSelecionado)
                {
                    quadradosNaTela[j][i].estaSelecionado = false;
                }
                else
                {
                    for (int k = 0; k < COLUNAS; k++)
                    {
                        for (int l = 0; l < LINHAS; l++)
                        {
                            quadradosNaTela[l][k].estaSelecionado = false;
                        }
                    }
                    quadradosNaTela[j][i].estaSelecionado = true;
                }
            }
        }
    }
}

void checarColisaoZumbiPlanta()
{
    for (int i = 0; i < numeroZumbis; i++)
    {
        if (!zumbis[i].estaVivo)
            continue;

        for (int j = 0; j < numeroPlantas; j++)
        {
            if (!plantas[j].estaViva)
                continue;
            for (int linha = 0; linha < LINHAS; linha++)
            {
                for (int coluna = 0; coluna < COLUNAS; coluna++)
                {
                    Rectangle quad = quadradosNaTela[linha][coluna].quadrado;

                    if (CheckCollisionPointRec(plantas[j].posicao, quad))
                    {
                        if (CheckCollisionRecs(
                                    (Rectangle)
                    {
                        zumbis[i]
                            .posicao.x,
                            zumbis[i].posicao.y, 72, 96
                        },
                        quad))
                        {
                            plantas[j].estaViva = false;
                            quadradosNaTela[linha][coluna].estaDisponivel = true;
                            goto proximo_zumbi;
                        }
                    }
                }
            }
proximo_zumbi:
            ;
        }
    }
}

void desenharPlantas()
{
    for (int i = 0; i < numeroPlantas; i++)
    {
        if (plantas[i].estaViva)
        {
            switch (plantas[i].tipo)
            {
            case PEASHOOTER:
                DrawCircleV(plantas[i].posicao, 20, GREEN);
                break;
            case SUNFLOWER:
                DrawCircleV(plantas[i].posicao, 20, YELLOW);
                break;
            default:
                break;
            }
        }
    }
}

void plantaSunFlower(int linha, int coluna)
{
    if (numeroPlantas < MAX_PLANTAS)
    {
        Vector2 centroQuadrado =
        {
            quadradosNaTela[linha][coluna].quadrado.x + quadradosNaTela[linha][coluna].quadrado.width / 2.0f,
            quadradosNaTela[linha][coluna].quadrado.y + quadradosNaTela[linha][coluna].quadrado.height / 2.0f
        };

        plantas[numeroPlantas++] = (Plantas)
        {
            .posicao = centroQuadrado,
             .tipo = SUNFLOWER,
              .tempoDisparoSol = 0,
               .estaViva = true
        };

        quadradosNaTela[linha][coluna].estaDisponivel = false;
    }
}

void verificaPlantaSunFlower()
{
    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            if (quadradosNaTela[j][i].estaSelecionado && quadradosNaTela[j][i].estaDisponivel && solzinho >= 50)
            {
                solzinho -= 50;
                plantaSunFlower(j, i);
                quadradosNaTela[j][i].estaSelecionado = false;
            }
        }
    }
}

void plantaPeaShooter(int linha, int coluna)
{
    if (numeroPlantas < MAX_PLANTAS)
    {
        Vector2 centroQuadrado =
        {
            quadradosNaTela[linha][coluna].quadrado.x + quadradosNaTela[linha][coluna].quadrado.width / 2.0f,
            quadradosNaTela[linha][coluna].quadrado.y + quadradosNaTela[linha][coluna].quadrado.height / 2.0f
        };

        plantas[numeroPlantas++] = (Plantas)
        {
            .posicao = centroQuadrado,
             .tipo = PEASHOOTER,
              .tempoDisparoSol = 0,
               .estaViva = true
        };

        quadradosNaTela[linha][coluna].estaDisponivel = false;
    }
}

void verificaPlantaPeaShooter()
{
    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            if (quadradosNaTela[j][i].estaSelecionado && quadradosNaTela[j][i].estaDisponivel && solzinho >= 100)
            {
                solzinho -= 100;
                plantaPeaShooter(j, i);
                quadradosNaTela[j][i].estaSelecionado = false;
            }
        }
    }
}

void criarProjeteis(float x, float y, int linha)
{
    for (int i = 0; i < MAX_PROJETEIS; i++)
    {
        if (!projeteis[i].ativa)
        {
            projeteis[i].posicao.x = x;
            projeteis[i].posicao.y = y;
            projeteis[i].velocidade = 200;
            projeteis[i].ativa = true;
            projeteis[i].dano = 20;
            projeteis[i].linhaSpawn = linha;
            projeteis[i].atingiu = false;

            numeroProjeteis++;
            return;
        }
    }
}

void criarSol(Vector2 pos)
{
    if (numeroSoisNaTela < MAX_SOIS)
    {
        soisNaTela[numeroSoisNaTela++] = (Sol)
        {
            .posicao = pos,
            .ativo = true,
            .valor = 25,
            .tempoVida = 6.0f
        };
    }
}

void atualizarSois()
{
    int j = 0;
    for (int i = 0; i < numeroSoisNaTela; i++)
    {
        if (soisNaTela[i].ativo)
        {
            soisNaTela[i].tempoVida -= GetFrameTime();
            if (soisNaTela[i].tempoVida <= 0)
            {
                soisNaTela[i].ativo = false;
            }
        }

        if (soisNaTela[i].ativo)
        {
            soisNaTela[j++] = soisNaTela[i];
        }
    }
    numeroSoisNaTela = j;
}

void desenharSois()
{
    for (int i = 0; i < numeroSoisNaTela; i++)
    {
        if (soisNaTela[i].ativo)
        {
            DrawCircleV(soisNaTela[i].posicao, 14, GOLD);
            DrawText("S", soisNaTela[i].posicao.x - 5, soisNaTela[i].posicao.y - 10, 20, ORANGE);
        }
    }
}

void coletarSol()
{
    if (IsKeyPressed(KEY_S))
    {
        for (int i = 0; i < numeroSoisNaTela; i++)
        {
            if (soisNaTela[i].ativo)
            {
                solzinho += soisNaTela[i].valor;
                soisNaTela[i].ativo = false;
            }
        }
    }
}

void atualizarPlantas()
{
    int i, j;

    for (i = 0; i < numeroPlantas; i++)
    {
        if (plantas[i].tipo == PEASHOOTER && plantas[i].estaViva)
        {
            plantas[i].tempoDisparoSol += GetFrameTime();

            if (plantas[i].tempoDisparoSol >= 4.0f)
            {
                int linha = -1;

                for (j = 0; j < LINHAS; j++)
                {
                    Rectangle quad = quadradosNaTela[j][0].quadrado;
                    if (plantas[i].posicao.y >= quad.y && plantas[i].posicao.y < quad.y + quad.height)
                    {
                        linha = j;
                        break;
                    }
                }

                int projX = plantas[i].posicao.x + 20;
                int projY = plantas[i].posicao.y;
                criarProjeteis(projX, projY, linha);

                plantas[i].tempoDisparoSol = 0.0f;
            }
        }

        if (plantas[i].tipo == SUNFLOWER && plantas[i].estaViva)
        {
            plantas[i].tempoDisparoSol += GetFrameTime();

            if (plantas[i].tempoDisparoSol >= 4.0f)
            {
                if (numeroSoisNaTela < MAX_SOIS)
                {
                    soisNaTela[numeroSoisNaTela++] = (Sol)
                    {
                        .posicao = {plantas[i].posicao.x + 30, plantas[i].posicao.y},
                         .ativo = true,
                          .valor = 25,
                           .tempoVida = 4.0f
                    };
                }
                plantas[i].tempoDisparoSol = 0.0f;
            }
        }
    }
}

void atualizarProjeteis()
{
    for (int i = 0; i < MAX_PROJETEIS; i++)
    {
        if (projeteis[i].ativa)
        {
            projeteis[i].posicao.x += projeteis[i].velocidade * GetFrameTime();

            if (projeteis[i].posicao.x > GetScreenWidth())
            {
                projeteis[i].ativa = false;
                continue;
            }

            for (int j = 0; j < numeroZumbis; j++)
            {
                if (zumbis[j].estaVivo && zumbis[j].linhaSpawn == projeteis[i].linhaSpawn)
                {
                    Rectangle zumbiRect = {zumbis[j].posicao.x, zumbis[j].posicao.y, 72, 96};
                    Rectangle projetilRect = {projeteis[i].posicao.x, projeteis[i].posicao.y, 10, 10};

                    if (CheckCollisionRecs(zumbiRect, projetilRect))
                    {
                        zumbis[j].vida -= projeteis[i].dano;
                        projeteis[i].ativa = false;

                        if (zumbis[j].vida <= 0)
                        {
                            zumbis[j].estaVivo = false;
                            pontuacao += 100;
                        }
                        break;
                    }
                }
            }
        }
    }
}


void desenharProjeteis()
{
    for (int i = 0; i < numeroProjeteis; i++)
    {
        if (projeteis[i].ativa)
        {
            DrawCircleV(projeteis[i].posicao, 5, BLUE);
        }
    }
}

void gerenciarHordas()
{
    if (hordaAtual >= MAX_HORDAS)
    {
        int vivos = 0;
        for (int i = 0; i < numeroZumbis; i++)
        {
            if (zumbis[i].estaVivo)
                vivos++;
        }

        if (vivos == 0)
        {
            vitoria = true;
            currentState = FIM_DE_JOGO;
        }

        return;
    }

    if (!hordaEmAndamento)
    {
        int vivos = 0;
        for (int i = 0; i < numeroZumbis; i++)
        {
            if (zumbis[i].estaVivo)
                vivos++;
        }

        if (vivos == 0)
        {
            hordaEmAndamento = true;
            zumbisDaHordaAtuais = 0;
            tempoDesdeUltimoZumbi = 0.0f;
        }
    }
    else
    {
        tempoDesdeUltimoZumbi += GetFrameTime();

        if (tempoDesdeUltimoZumbi >= 3.0f && zumbisDaHordaAtuais < hordas[hordaAtual])
        {
            spawnarZumbi();
            zumbisDaHordaAtuais++;
            tempoDesdeUltimoZumbi = 0.0f;
        }

        if (zumbisDaHordaAtuais >= hordas[hordaAtual])
        {
            hordaAtual++;
            hordaEmAndamento = false;
        }
    }
}

void lerArquivoDeHordas()
{
    FILE *arquivo = fopen("config.txt", "r");

    if (arquivo == NULL)
    {
        printf("Erro ao abrir o arquivo config.txt\n");
        hordas[0] = 5; hordas[1] = 7; hordas[2] = 9;
        return;
    }

    for (int i = 0; i < MAX_HORDAS; i++)
    {
        fscanf(arquivo, "%d", &hordas[i]);
    }

    fclose(arquivo);
}

void spawnarZumbi()
{
    int linha = GetRandomValue(0, LINHAS - 1);
    Rectangle quad = quadradosNaTela[linha][COLUNAS - 1].quadrado;

    float xInicial = quad.x + quad.width + 96;
    float yInicial = quad.y;

    if (numeroZumbis >= MAX_ZUMBIS)
    {
        return;
    }

    zumbis[numeroZumbis++] = (Zumbis)
    {
        .posicao = {xInicial, yInicial},
         .linhaSpawn = linha,
          .velocidade = 0.2f,
           .vida = 100,
            .estaVivo = true
    };
}

void desenharZumbis()
{
    int i;

    for (i = 0; i < numeroZumbis; i++)
    {
        if (zumbis[i].estaVivo)
        {
            Color corZumbi = RED;

            Rectangle corpo =
            {
                zumbis[i].posicao.x,
                zumbis[i].posicao.y,
                72,
                96
            };

            DrawRectangleRec(corpo, corZumbi);
        }
    }
}

void atualizarZumbis()
{
    int i;

    for (i = 0; i < numeroZumbis; i++)
    {
        if (zumbis[i].estaVivo)
        {
            zumbis[i].posicao.x -= zumbis[i].velocidade;
            zumbis[i].posicao.y = quadradosNaTela[zumbis[i].linhaSpawn][COLUNAS - 1].quadrado.y;

            if (zumbis[i].posicao.x - 100 < 0)
            {
                currentState = FIM_DE_JOGO;
            }
        }
    }

    checarColisaoZumbiPlanta();
}

void desenharHUD()
{
    char textoSol[30];
    char textoPontos[30];

    Rectangle caixaHUD = {20, 20, 200, 70};
    DrawRectangleRec(caixaHUD, (Color)
    {
        50, 50, 50, 200
    });
    DrawRectangleLinesEx(caixaHUD, 3, BLACK);
    sprintf(textoSol, "Sois: %d", solzinho);
    DrawText(textoSol, caixaHUD.x + 15, caixaHUD.y + 10, 20, GOLD);

    sprintf(textoPontos, "Pontos: %d", pontuacao);
    DrawText(textoPontos, caixaHUD.x + 15, caixaHUD.y + 40, 20, SKYBLUE);
}

void desenharPlantasDisponiveis()
{
    Rectangle caixa = {20, 110, 200, 150};
    DrawRectangleRec(caixa, (Color){50, 50, 50, 200});
    DrawRectangleLinesEx(caixa, 3, BLACK); 

    int posX = 45; 
    int raio = 20;

    int posYSunflower = caixa.y + 30;
    Color corSunflower = (solzinho >= 50) ? YELLOW : (Color){100, 100, 0, 255};
    DrawCircle(posX, posYSunflower, raio, corSunflower);
    DrawText("Sunflower", posX + 50, posYSunflower - 15, 20, RAYWHITE);
    DrawText("50 S", posX + 50, posYSunflower + 15, 20, GOLD);

    int posYPeashooter = posYSunflower + 80;
    Color corPeashooter = (solzinho >= 100) ? GREEN : (Color){0, 50, 0, 255};
    DrawCircle(posX, posYPeashooter, raio, corPeashooter);
    DrawText("Peashooter", posX + 50, posYPeashooter - 15, 20, RAYWHITE);
    DrawText("100 S", posX + 50, posYPeashooter + 15, 20, GOLD);
}

void ordenarJogadores(Jogador *lista, int n)
{
    int i, j;
    for (i = 0; i < n - 1; i++)
    {
        for (j = 0; j < n - i - 1; j++)
        {
            if (lista[j].pontos < lista[j + 1].pontos)
            {
                Jogador temp = lista[j];
                lista[j] = lista[j + 1];
                lista[j + 1] = temp;
            }
        }
    }
}

void salvaJogador(char name[], int pontuacao)
{
    Jogador lista[LIMITE_TOTAL_JOGADORES];
    int total = 0;
    int salvar;

    FILE *arq = fopen("top_scores.bin", "rb");
    if (arq != NULL)
    {
        while (fread(&lista[total], sizeof(Jogador), 1, arq) == 1 && total < LIMITE_TOTAL_JOGADORES)
        {
            total++;
        }
        fclose(arq);
    }

    if (total < LIMITE_TOTAL_JOGADORES)
    {
        strncpy(lista[total].nome, name, sizeof(lista[total].nome) - 1);
        lista[total].nome[sizeof(lista[total].nome) - 1] = '\0';
        lista[total].pontos = pontuacao;
        total++;
    }

    ordenarJogadores(lista, total);

    salvar = total < MAX_JOGADORES ? total : MAX_JOGADORES;

    arq = fopen("top_scores.bin", "wb");
    if (arq == NULL)
    {
        printf("Erro ao salvar jogadores.\n");
        return;
    }

    for (int i = 0; i < salvar; i++)
    {
        fwrite(&lista[i], sizeof(Jogador), 1, arq);
    }

    fclose(arq);
}

void carregarTabelaDeLideres(Jogador *top5)
{
    FILE *arq = fopen("top_scores.bin", "rb");
    Jogador todos[LIMITE_TOTAL_JOGADORES];
    int total = 0;

    if (arq == NULL)
    {
        for (int i = 0; i < MAX_JOGADORES; i++)
        {
            strcpy(top5[i].nome, "------");
            top5[i].pontos = 0;
        }
        return;
    }

    while (fread(&todos[total], sizeof(Jogador), 1, arq) == 1 && total < LIMITE_TOTAL_JOGADORES)
    {
        total++;
    }

    fclose(arq);

    ordenarJogadores(todos, total);

    int limite = total < MAX_JOGADORES ? total : MAX_JOGADORES;
    for (int i = 0; i < limite; i++)
    {
        top5[i] = todos[i];
    }

    for (int i = limite; i < MAX_JOGADORES; i++)
    {
        strcpy(top5[i].nome, "------");
        top5[i].pontos = 0;
    }
}

void desenharTabelaLideres(Jogador *jogadores)
{
    int i;
    
    int deslocamentoY = -20;

    Rectangle caixa = {300, 80 + deslocamentoY, 680, 480};
    DrawRectangleRec(caixa, (Color){230, 230, 230, 255}); 
    DrawRectangleLinesEx(caixa, 4, DARKGREEN); 

    DrawText("Tabela de Líderes", caixa.x + 200, caixa.y + 10, 30, DARKGREEN);

    DrawText("Posição", caixa.x + 50, caixa.y + 70, 22, BLACK);
    DrawText("Nome", caixa.x + 220, caixa.y + 70, 22, BLACK);
    DrawText("Pontos", caixa.x + 500, caixa.y + 70, 22, BLACK);

    for (i = 0; i < MAX_JOGADORES; i++)
    {
        char posicao[4], pontos[12];

        sprintf(posicao, "%d", i + 1);
        sprintf(pontos, "%d", jogadores[i].pontos);

        int linhaY = caixa.y + 110 + i * 40;

        DrawText(posicao, caixa.x + 50, linhaY, 20, DARKGRAY);
        DrawText(jogadores[i].nome, caixa.x + 220, linhaY, 20, DARKGRAY);
        DrawText(pontos, caixa.x + 500, linhaY, 20, DARKGRAY);
    }

    DrawText("Pressione M para voltar", caixa.x + 220, caixa.y + 420, 20, GRAY);
}

void pausaMenu()
{
    ClearBackground(DARKGRAY);

    Rectangle caixa = {300, 120, 680, 360};
    DrawRectangleRec(caixa, (Color){230, 230, 230, 255});
    DrawRectangleLinesEx(caixa, 4, MAROON);

    DrawText("Jogo Pausado", caixa.x + 220, caixa.y + 20, 32, MAROON);

    const char *mensagem1 = "Deseja realmente sair e voltar ao menu?";
    const char *mensagem2 = "Todo o progresso atual será perdido.";

    DrawText(mensagem1, caixa.x + 100, caixa.y + 80, 22, BLACK);
    DrawText(mensagem2, caixa.x + 110, caixa.y + 110, 22, BLACK);

    Rectangle botaoContinuar = {caixa.x + 100, caixa.y + 200, 200, 60};
    if (CheckCollisionPointRec(GetMousePosition(), botaoContinuar))
    {
        DrawRectangleRec(botaoContinuar, (Color){170, 220, 170, 255});
        if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
        {
            currentState = JOGANDO;
        }
    }
    else
    {
        DrawRectangleRec(botaoContinuar, (Color){100, 180, 100, 255});
    }
    DrawRectangleLinesEx(botaoContinuar, 2, DARKGREEN);
    DrawText("Continuar", botaoContinuar.x + 40, botaoContinuar.y + 18, 24, WHITE);

    Rectangle botaoSair = {caixa.x + 380, caixa.y + 200, 200, 60};
    if (CheckCollisionPointRec(GetMousePosition(), botaoSair))
    {
        DrawRectangleRec(botaoSair, (Color){240, 150, 150, 255});
        if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
        {
            resetaJogo();
            currentState = MENU;
        }
    }
    else
    {
        DrawRectangleRec(botaoSair, (Color){200, 80, 80, 255});
    }
    DrawRectangleLinesEx(botaoSair, 2, MAROON);
    DrawText("Voltar ao Menu", botaoSair.x + 10, botaoSair.y + 18, 24, WHITE);
}

bool IsAnyKeyPressed()
{
    bool keyPressed = false;
    int key = GetKeyPressed();

    if ((key >= 32) && (key <= 126))
        keyPressed = true;

    return keyPressed;
}

void jogoGanho()
{
    static char name[MAX_INPUT_CHARS + 1] = "\0";
    static int letterCount = 0;
    static bool mouseOnText = false;
    static int framesCounter = 0;

    int screenWidth = GetScreenWidth();
    int screenHeight = GetScreenHeight();

    int baseY = 180 + 50;

    Rectangle textBox = {screenWidth / 2.0f - 112, baseY + 10, 225, 50};

    mouseOnText = CheckCollisionPointRec(GetMousePosition(), textBox);
    SetMouseCursor(mouseOnText ? MOUSE_CURSOR_IBEAM : MOUSE_CURSOR_DEFAULT);

    if (mouseOnText)
    {
        int key = GetCharPressed();
        while (key > 0)
        {
            if ((key >= 32) && (key <= 125) && (letterCount < MAX_INPUT_CHARS))
            {
                name[letterCount++] = (char)key;
                name[letterCount] = '\0';
            }
            key = GetCharPressed();
        }

        if (IsKeyPressed(KEY_BACKSPACE) && letterCount > 0)
        {
            letterCount--;
            name[letterCount] = '\0';
        }
    }

    framesCounter = mouseOnText ? framesCounter + 1 : 0;

    int boxWidth = 400;
    int boxHeight = 180;
    int boxX = screenWidth / 2 - boxWidth / 2;
    int boxY = baseY - 70;

    Color boxColor = (Color){200, 255, 200, 180};

    DrawRectangle(boxX, boxY, boxWidth, boxHeight, boxColor);
    DrawRectangleLines(boxX, boxY, boxWidth, boxHeight, DARKGREEN);

    DrawText("Vitoria! Você venceu os zumbis!", screenWidth / 2 - MeasureText("Vitoria! Você venceu os zumbis!", 24) / 2, boxY + 15, 24, DARKGREEN);
    DrawText("Digite seu nome:", screenWidth / 2 - MeasureText("Digite seu nome:", 20) / 2, boxY + 55, 20, DARKGREEN);

    DrawRectangleRec(textBox, LIGHTGRAY);
    DrawRectangleLinesEx(textBox, 2, mouseOnText ? DARKGREEN : GRAY);

    DrawText(name, (int)textBox.x + 10, (int)textBox.y + 10, 40, DARKGRAY);

    if (mouseOnText && ((framesCounter / 20) % 2 == 0) && (letterCount < MAX_INPUT_CHARS))
    {
        int cursorX = (int)textBox.x + 10 + MeasureText(name, 40);
        DrawText("_", cursorX, (int)textBox.y + 10, 40, DARKGRAY);
    }

    if (letterCount > 0)
    {
        const char* instrucao = "Pressione ENTER para continuar...";
        DrawText(instrucao, screenWidth / 2 - MeasureText(instrucao, 20) / 2, boxY + boxHeight - 30, 20, DARKGRAY);
    }

    if (IsKeyPressed(KEY_ENTER) && letterCount > 0)
    {
        salvaJogador(name, pontuacao);
        name[0] = '\0';
        letterCount = 0;
        resetaJogo();
        currentState = MENU;
    }
}

void jogoPerdido()
{
    ClearBackground(MAROON);

    int screenWidth = GetScreenWidth();
    int screenHeight = GetScreenHeight();

    DrawRectangle(0, 0, screenWidth, screenHeight, (Color){100, 0, 0, 200});

    int boxWidth = 700;
    int boxHeight = 220;
    int boxX = (screenWidth - boxWidth) / 2;
    int boxY = (screenHeight - boxHeight) / 2;
    DrawRectangle(boxX, boxY, boxWidth, boxHeight, (Color){60, 0, 0, 220});
    DrawRectangleLinesEx((Rectangle){boxX, boxY, boxWidth, boxHeight}, 4, (Color){139, 0, 0, 255});

    const char *mensagem1 = "Os zumbis comeram seu cérebro!";
    const char *mensagem2 = "Mas não tema, é sempre chance para tentar novamente.";
    const char *mensagem3 = "Caso deseje jogar novamente, PRESSIONE R.";
    const char *mensagem4 = "Caso deseje voltar para o menu, PRESSIONE M.";

    int fontSize = 22;
    int lineSpacing = 35;
    int bigSpacing = 55; 
    int offsetDown = 20;  
    int textX = screenWidth / 2;

    DrawText(mensagem1, textX - MeasureText(mensagem1, fontSize)/2, boxY + 20, fontSize, WHITE);
    DrawText(mensagem2, textX - MeasureText(mensagem2, fontSize)/2, boxY + 20 + lineSpacing, fontSize, WHITE);

    DrawText(mensagem3, textX - MeasureText(mensagem3, fontSize)/2, boxY + 20 + lineSpacing + bigSpacing + offsetDown, fontSize, WHITE);
    DrawText(mensagem4, textX - MeasureText(mensagem4, fontSize)/2, boxY + 20 + lineSpacing + bigSpacing + lineSpacing + offsetDown, fontSize, WHITE);

    if (IsKeyPressed(KEY_M))
    {
        resetaJogo();
        currentState = MENU;
    }

    if (IsKeyPressed(KEY_R))
    {
        resetaJogo();
        currentState = JOGANDO;
    }
}

void desenharJogando()
{
    ClearBackground(RAYWHITE);

    const int bordaEsquerda = 20;
    const int bordaDireita = 20;
    const int bordaSuperior = 40;
    const int bordaInferior = 20;

    int larguraJanela = GetScreenWidth();
    int alturaJanela = GetScreenHeight();

    int larguraMaximaGramado = larguraJanela - (bordaEsquerda + bordaDireita);
    int alturaMaximaGramado = alturaJanela - (bordaSuperior + bordaInferior);

    int larguraGramado = COLUNAS * ALTURA_GRADE;
    int alturaGramado = LINHAS * LARGURA_GRADE;

    int inicioX = bordaEsquerda + (larguraMaximaGramado - larguraGramado) / 2;
    int inicioY = bordaSuperior;

    for (int i = 0; i <= COLUNAS; i++)
    {
        int x = inicioX + i * ALTURA_GRADE;
        DrawLine(x, inicioY, x, inicioY + alturaGramado, BLACK);
    }

    for (int j = 0; j <= LINHAS; j++)
    {
        int y = inicioY + j * LARGURA_GRADE;
        DrawLine(inicioX, y, inicioX + larguraGramado, y, BLACK);
    }

    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            quadradosNaTela[j][i].quadrado = (Rectangle)
            {
                inicioX + i * ALTURA_GRADE,
                inicioY + j * LARGURA_GRADE,
                ALTURA_GRADE - 1,
                LARGURA_GRADE - 1
            };

            if ((i + j) % 2)
                DrawRectangleRec(quadradosNaTela[j][i].quadrado, DARKGREEN);
            else
                DrawRectangleRec(quadradosNaTela[j][i].quadrado, LIME);

            if (quadradosNaTela[j][i].estaSelecionado)
                DrawRectangleLinesEx(quadradosNaTela[j][i].quadrado, 2, RED);
        }
    }

    if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
    {
        checaColisaoQuadrado();
    }

    if (IsKeyPressed(KEY_ONE))
    {
        verificaPlantaSunFlower();
    }

    if (IsKeyPressed(KEY_TWO))
    {
        verificaPlantaPeaShooter();
    }

    if (IsKeyPressed(KEY_Z))
    {
        spawnarZumbi();
    }

    if (IsKeyPressed(KEY_V))
    {
        vitoria = true;
        currentState = FIM_DE_JOGO;
    }

    if (IsKeyPressed(KEY_L))
    {
        vitoria = false;
        currentState = FIM_DE_JOGO;
    }

    if (IsKeyPressed(KEY_P))
    {
        pontuacao += 100;
    }
}

int main(void)
{
    InitWindow(1280, 600, "INF VS Zombies");
    SetTargetFPS(60);

    Jogador jogadores[MAX_JOGADORES];

    carregarTabelaDeLideres(jogadores);
    lerArquivoDeHordas();
    inicializaQuadrados();

    while (!WindowShouldClose())
    {
        BeginDrawing();

        switch (currentState)
        {
        case MENU:
            ClearBackground(RAYWHITE);
            desenharMenuPrincipal();
            break;

        case JOGANDO:
            ClearBackground(RAYWHITE);

            desenharJogando();
            desenharHUD();
            desenharPlantasDisponiveis();

            desenharPlantas();
            desenharProjeteis();
            desenharZumbis();
            gerenciarHordas();

            atualizarPlantas();
            atualizarProjeteis();
            atualizarZumbis();

            desenharSois();
            atualizarSois();
            coletarSol();

            if (IsKeyPressed(KEY_M))
            {
                currentState = PAUSADO;
            }
            break;

        case PAUSADO:
            ClearBackground(RAYWHITE);
            pausaMenu();
            break;

        case TABELA_LIDER:
            ClearBackground(RAYWHITE);
            Jogador top5[MAX_JOGADORES];
            carregarTabelaDeLideres(top5);
            desenharTabelaLideres(top5);
            if (IsKeyPressed(KEY_M))
            {
                currentState = MENU;
            }
            break;

        case FIM_DE_JOGO:
            ClearBackground(RAYWHITE);
            if (vitoria == true)
            {
                jogoGanho();
            }
            else
            {
                jogoPerdido();
            }
        }

        EndDrawing();
    }

    CloseWindow();

    return 0;
}
