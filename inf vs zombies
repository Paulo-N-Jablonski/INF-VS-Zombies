#include "raylib.h"
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>

#define LINHAS 5
#define COLUNAS 9
#define ALTURA_GRADE 72
#define LARGURA_GRADE 96
#define MAX_PLANTAS 90
#define MAX_ZUMBIS 100
#define MAX_PROJETEIS 1000
#define MAX_INPUT_CHARS 9

typedef enum
{
    MENU,
    JOGANDO,
    PAUSADO,
    TABELA_LIDER,
    FIM_DE_JOGO
} GameState;
GameState currentState = MENU;

typedef enum
{
    NENHUMA,
    PEASHOOTER,
    SUNFLOWER
} TipoPlantas;

typedef struct Plantas
{
    Vector2 posicao;
    TipoPlantas tipo;
    float tempoDisparoSol;
    bool estaViva;
} Plantas;

Plantas plantas[MAX_PLANTAS];
int numeroPlantas = 0;

typedef struct Projeteis
{
    Vector2 posicao;
    float velocidade;
    int linhaSpawn;
    int dano;
    bool atingiu;
    bool ativa;
} Projeteis;

Projeteis projeteis[MAX_PROJETEIS];
int numeroProjeteis = 0;

typedef struct Zumbis
{
    Vector2 posicao;
    int linhaSpawn;
    float velocidade; // recomendado 0.2 - 0.4
    int vida;
    bool estaVivo;
} Zumbis;

Zumbis zumbis[MAX_ZUMBIS];
int numeroZumbis = 0;

typedef struct Quadrados
{
    Rectangle quadrado;
    bool estaSelecionado;
    bool estaDisponivel;
} Quadrados;

Quadrados quadradosNaTela[LINHAS][COLUNAS];

int moedinhas = 100;
int pontuacao = 0;
int zumbisSpawnados = 0;
bool vitoria = false;

void resetaJogo()
{
    int i, j;

    for (i = 0; i < COLUNAS; i++)
    {
        for (j = 0; j < LINHAS; j++)
        {
            quadradosNaTela[j][i].estaDisponivel = true;
        }
    }

    for (i = 0; i < numeroPlantas; i++)
    {
        plantas[i].estaViva = false;
    }
    numeroPlantas = 0;

    for (i = 0; i < numeroZumbis; i++)
    {
        zumbis[i].estaVivo = false;
    }
    numeroZumbis = 0;

    for (i = 0; i < numeroProjeteis; i++)
    {
        projeteis[i].ativa = false;
    }
    numeroProjeteis = 0;

    moedinhas = 100;
    pontuacao = 0;
    zumbisSpawnados = 0;
    vitoria = false;
}

void desenharMenuPrincipal()
{
    ClearBackground(RAYWHITE);
    SetWindowSize(1280, 600);

    DrawText("Criador: Paulo Nata Jablonski - Turma D", 2, 590, 10, BLACK);
    DrawText("INF Vs Zombies", 145, 110, 40, DARKGREEN);

    // botao novo-jogo
    if (CheckCollisionPointRec(GetMousePosition(), (Rectangle){
                                                       150, 200, 300, 50}))
    {
        DrawRectangle(150, 200, 300, 50, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            currentState = JOGANDO;
        }
    }
    else
    {
        DrawRectangle(150, 200, 300, 50, LIME);
    }
    DrawText("Jogar", 265, 210, 30, WHITE);

    // botao continuar jogando
    if (CheckCollisionPointRec(GetMousePosition(), (Rectangle){
                                                       150, 270, 300, 50}))
    {
        DrawRectangle(150, 270, 300, 50, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            // currentState = JOGANDO;
        }
    }
    else
    {
        DrawRectangle(150, 270, 300, 50, LIME);
    }
    DrawText("[TESTE]", 240, 280, 30, WHITE);

    // bot?o da tabela de lideres
    if (CheckCollisionPointRec(GetMousePosition(), (Rectangle){
                                                       150, 340, 300, 50}))
    {
        DrawRectangle(150, 340, 300, 50, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            currentState = TABELA_LIDER;
        }
    }
    else
    {
        DrawRectangle(150, 340, 300, 50, LIME);
    }
    DrawText("Tabela de Lideres", 162, 350, 30, WHITE);

    // bot?o sair
    if (CheckCollisionPointRec(GetMousePosition(), (Rectangle){
                                                       150, 410, 300, 50}))
    {
        DrawRectangle(150, 410, 300, 50, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {
            CloseWindow();
        }
    }
    else
    {
        DrawRectangle(150, 410, 300, 50, LIME);
    }
    DrawText("Sair", 280, 420, 30, WHITE);
}

void inicializaQuadrados()
{
    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            quadradosNaTela[j][i].estaSelecionado = false;
            quadradosNaTela[j][i].estaDisponivel = true;
        }
    }
}

void checaColisaoQuadrado()
{
    Vector2 posicaoMouse = GetMousePosition();

    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            // verifica se o mouse foi clicado em cima de um quadrado
            if (CheckCollisionPointRec(posicaoMouse, quadradosNaTela[j][i].quadrado))
            {
                // caso o quadrado ja esteja selecionado, desmarca
                if (quadradosNaTela[j][i].estaSelecionado)
                {
                    quadradosNaTela[j][i].estaSelecionado = false;
                }
                else
                {
                    // c.c. desmarca todos
                    for (int k = 0; k < COLUNAS; k++)
                    {
                        for (int l = 0; l < LINHAS; l++)
                        {
                            quadradosNaTela[l][k].estaSelecionado = false;
                        }
                    }
                    quadradosNaTela[j][i].estaSelecionado = true;
                }
            }
        }
    }
}

void checarColisaoZumbiPlanta()
{
    for (int i = 0; i < numeroZumbis; i++)
    {
        if (!zumbis[i].estaVivo)
            continue;

        for (int j = 0; j < numeroPlantas; j++)
        {
            if (!plantas[j].estaViva)
                continue;

            // Para saber em qual quadrado a planta est?, voc? pode comparar a posi??o da planta com os quadrados
            // Vamos verificar se o zumbi e a planta est?o no mesmo quadrado

            // Pode simplificar pegando o quadrado mais pr?ximo da planta
            for (int linha = 0; linha < LINHAS; linha++)
            {
                for (int coluna = 0; coluna < COLUNAS; coluna++)
                {
                    Rectangle quad = quadradosNaTela[linha][coluna].quadrado;

                    // verifica se a planta est? no quadrado
                    if (CheckCollisionPointRec(plantas[j].posicao, quad))
                    {
                        // verifica se o zumbi colide no mesmo quadrado que a planta
                        if (CheckCollisionRecs(
                                (Rectangle){
                                    zumbis[i]
                                        .posicao.x,
                                    zumbis[i].posicao.y, 72, 96},
                                quad))
                        {
                            plantas[j].estaViva = false;

                            // quadrado volta a estar disponivel
                            quadradosNaTela[linha][coluna].estaDisponivel = true;

                            // para evitar diversas mortes na mesma coluna
                            goto proximo_zumbi;
                        }
                    }
                }
            }
        proximo_zumbi:;
        }
    }
}

void desenharPlantas()
{
    for (int i = 0; i < numeroPlantas; i++)
    {
        if (plantas[i].estaViva)
        {
            switch (plantas[i].tipo)
            {
            case PEASHOOTER:
                DrawCircleV(plantas[i].posicao, 20, GREEN);
                break;
            case SUNFLOWER:
                DrawCircleV(plantas[i].posicao, 20, YELLOW);
                break;
            default:
                break;
            }
        }
    }
}

void plantaSunFlower(int linha, int coluna)
{
    if (numeroPlantas < MAX_PLANTAS)
    {
        Vector2 centroQuadrado =
            {
                quadradosNaTela[linha][coluna].quadrado.x + quadradosNaTela[linha][coluna].quadrado.width / 2.0f,
                quadradosNaTela[linha][coluna].quadrado.y + quadradosNaTela[linha][coluna].quadrado.height / 2.0f};

        plantas[numeroPlantas++] = (Plantas){
            .posicao = centroQuadrado,
            .tipo = SUNFLOWER,
            .tempoDisparoSol = 0,
            .estaViva = true};

        quadradosNaTela[linha][coluna].estaDisponivel = false;
    }
}

void verificaPlantaSunFlower()
{
    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            if (quadradosNaTela[j][i].estaSelecionado && quadradosNaTela[j][i].estaDisponivel && moedinhas >= 50)
            {
                moedinhas -= 50;
                plantaSunFlower(j, i);
                quadradosNaTela[j][i].estaSelecionado = false; // reseta sele??o
            }
        }
    }
}

void plantaPeaShooter(int linha, int coluna)
{
    if (numeroPlantas < MAX_PLANTAS)
    {
        Vector2 centroQuadrado =
            {
                quadradosNaTela[linha][coluna].quadrado.x + quadradosNaTela[linha][coluna].quadrado.width / 2.0f,
                quadradosNaTela[linha][coluna].quadrado.y + quadradosNaTela[linha][coluna].quadrado.height / 2.0f};

        plantas[numeroPlantas++] = (Plantas){
            .posicao = centroQuadrado,
            .tipo = PEASHOOTER,
            .tempoDisparoSol = 0,
            .estaViva = true};

        quadradosNaTela[linha][coluna].estaDisponivel = false;
    }
}

void verificaPlantaPeaShooter()
{
    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {
            if (quadradosNaTela[j][i].estaSelecionado && quadradosNaTela[j][i].estaDisponivel && moedinhas >= 100)
            {
                moedinhas -= 100;
                plantaPeaShooter(j, i);
                quadradosNaTela[j][i].estaSelecionado = false;
            }
        }
    }
}

void atualizarPlantas()
{
    int i, j;

    for (i = 0; i < numeroPlantas; i++)
    {
        if (plantas[i].tipo == PEASHOOTER && plantas[i].estaViva)
        {
            plantas[i].tempoDisparoSol += GetFrameTime();

            if (plantas[i].tempoDisparoSol >= 4.0f)
            {
                int linha = -1;

                for (j = 0; j < LINHAS; j++)
                {
                    Rectangle quad = quadradosNaTela[j][0].quadrado;
                    if (plantas[i].posicao.y >= quad.y && plantas[i].posicao.y < quad.y + quad.height)
                    {
                        linha = j;
                        break;
                    }
                }

                criarProjeteis(plantas[i].posicao.x, plantas[i].posicao.y, linha);
                plantas[i].tempoDisparoSol = 0.0f;
            }
        }

        if (plantas[i].tipo == SUNFLOWER && plantas[i].estaViva)
        {
            plantas[i].tempoDisparoSol += GetFrameTime();

            if (plantas[i].tempoDisparoSol >= 4.0f)
            {
                moedinhas += 50; // gera moeda
                plantas[i].tempoDisparoSol = 0.0f;
            }
        }
    }
}

void criarProjeteis(float x, float y, int linha)
{
    if (numeroProjeteis < MAX_PROJETEIS) {
        projeteis[numeroProjeteis].posicao.x = x + 20;
        projeteis[numeroProjeteis].posicao.y = y;
        projeteis[numeroProjeteis].velocidade = 200;
        projeteis[numeroProjeteis].ativa = true;
        projeteis[numeroProjeteis].dano = 20; 
        projeteis[numeroProjeteis].linhaSpawn = linha;
        projeteis[numeroProjeteis].atingiu = false;
        numeroProjeteis++;
    }
}

void atualizarProjeteis()
{
    for (int i = 0; i < numeroProjeteis; i++)
    {
        if (projeteis[i].ativa)
        {
            projeteis[i].posicao.x += projeteis[i].velocidade * GetFrameTime();

            // Se sair da tela, desativa
            if (projeteis[i].posicao.x > GetScreenWidth())
            {
                projeteis[i].ativa = false;
                continue;
            }

            // Verifica colisão com zumbis na mesma linha
            for (int j = 0; j < numeroZumbis; j++)
            {
                if (zumbis[j].estaVivo && zumbis[j].linhaSpawn == projeteis[i].linhaSpawn)
                {
                    Rectangle zumbiRect = {zumbis[j].posicao.x, zumbis[j].posicao.y, 72, 96};
                    Rectangle projetilRect = {projeteis[i].posicao.x, projeteis[i].posicao.y, 10, 10};

                    if (CheckCollisionRecs(zumbiRect, projetilRect))
                    {
                        zumbis[j].vida -= projeteis[i].dano;
                        projeteis[i].ativa = false; // projétil some ao atingir

                        if (zumbis[j].vida <= 0)
                        {
                            zumbis[j].estaVivo = false;
                            pontuacao += 10; // pontuação por matar zumbi
                        }
                        break;
                    }
                }
            }
        }
    }
}

void desenharProjeteis()
{
    for (int i = 0; i < numeroProjeteis; i++)
    {
        if (projeteis[i].ativa)
        {
            DrawCircleV(projeteis[i].posicao, 5, BLUE);
        }
    }
}

void spawnarZumbi()
{
    if (numeroZumbis >= MAX_ZUMBIS)
        return;

    int linha = GetRandomValue(0, LINHAS - 1);

    Rectangle quad = quadradosNaTela[linha][COLUNAS - 1].quadrado;

    float xInicial = quad.x + quad.width + 96;
    float yInicial = quad.y;

    zumbis[numeroZumbis++] = (Zumbis){
        .posicao = {xInicial, yInicial},
        .linhaSpawn = linha,
        .velocidade = 0.2f,
        .vida = 100,
        .estaVivo = true};
}

void desenharZumbis()
{
    for (int i = 0; i < numeroZumbis; i++)
    {
        if (zumbis[i].estaVivo)
        {
            Color corZumbi = RED;

            Rectangle corpo =
                {
                    zumbis[i].posicao.x,
                    zumbis[i].posicao.y,
                    72, // largura e altura
                    96};

            DrawRectangleRec(corpo, corZumbi);
        }
    }
}

void atualizarZumbis()
{
    for (int i = 0; i < numeroZumbis; i++)
    {
        if (zumbis[i].estaVivo)
        {
            zumbis[i].posicao.x -= zumbis[i].velocidade;

            // garante o alinhamento do zumbi em rela??o aos quadrados
            zumbis[i].posicao.y = quadradosNaTela[zumbis[i].linhaSpawn][COLUNAS - 1].quadrado.y;

            // TEMPORARIO: remove zumbi que sai da tela pela ESQUERDA
            if (zumbis[i].posicao.x - 100 < 0)
            {
                currentState = FIM_DE_JOGO;
            }
        }
    }

    // checa se houve alguma colis?o ap?s o movimento do zumbi
    checarColisaoZumbiPlanta();
}

void pausaMenu()
{
    ClearBackground(DARKGRAY);

    const char *mensagem1 = "Certeza que deseja sair no meio da partida?";
    const char *mensagem2 = "Todo progresso nao salvo sera perdido.";
    DrawText(mensagem1, 200, 180, 20, WHITE);
    DrawText(mensagem2, 200, 210, 20, WHITE);

    // Bot?o Continuar
    Rectangle botaoContinuar = {250, 280, 150, 50};
    if (CheckCollisionPointRec(GetMousePosition(), botaoContinuar))
    {
        DrawRectangleRec(botaoContinuar, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
        {
            currentState = JOGANDO; // Retorna ao jogo
        }
    }
    else
    {
        DrawRectangleRec(botaoContinuar, GREEN);
    }
    DrawText("Continuar", botaoContinuar.x + 20, botaoContinuar.y + 15, 20, WHITE);

    // Bot?o Sair
    Rectangle botaoSair = {450, 280, 150, 50};
    if (CheckCollisionPointRec(GetMousePosition(), botaoSair))
    {
        DrawRectangleRec(botaoSair, LIGHTGRAY);
        if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))
        {
            resetaJogo();
            currentState = MENU;
        }
    }
    else
    {
        DrawRectangleRec(botaoSair, RED);
    }
    DrawText("Sair", botaoSair.x + 50, botaoSair.y + 15, 20, WHITE);
}

bool IsAnyKeyPressed()
{
    bool keyPressed = false;
    int key = GetKeyPressed();

    if ((key >= 32) && (key <= 126))
        keyPressed = true;

    return keyPressed;
}

void jogoGanho()
{
    static char name[MAX_INPUT_CHARS + 1] = "\0";
    static int letterCount = 0;
    static bool mouseOnText = false;
    static int framesCounter = 0;

    Rectangle textBox = {GetScreenWidth() / 2.0f - 100, 180, 225, 50};

    mouseOnText = CheckCollisionPointRec(GetMousePosition(), textBox);

    if (mouseOnText)
        SetMouseCursor(MOUSE_CURSOR_IBEAM);
    else
        SetMouseCursor(MOUSE_CURSOR_DEFAULT);

    if (mouseOnText)
    {
        int key = GetCharPressed();
        while (key > 0)
        {
            if ((key >= 32) && (key <= 125) && (letterCount < MAX_INPUT_CHARS))
            {
                name[letterCount++] = (char)key;
                name[letterCount] = '\0';
            }
            key = GetCharPressed();
        }

        if (IsKeyPressed(KEY_BACKSPACE))
        {
            if (letterCount > 0)
                letterCount--;
            name[letterCount] = '\0';
        }
    }

    if (mouseOnText)
        framesCounter++;
    else
        framesCounter = 0;

    DrawText("Vitoria! Você venceu os zumbis!", (GetScreenWidth() / 2) - 150, 110, 20, DARKGREEN);
    DrawText("Digite seu nome:", (GetScreenWidth() / 2) - 70, 140, 20, DARKGREEN);

    DrawRectangleRec(textBox, LIGHTGRAY);
    if (mouseOnText)
        DrawRectangleLinesEx(textBox, 2, DARKGREEN);
    else
        DrawRectangleLinesEx(textBox, 2, GRAY);

    DrawText(name, (int)textBox.x + 5, (int)textBox.y + 10, 40, DARKGRAY);

    if (mouseOnText && ((framesCounter / 20) % 2 == 0) && (letterCount < MAX_INPUT_CHARS))
    {
        DrawText("_", (int)textBox.x + 8 + MeasureText(name, 40), (int)textBox.y + 10, 40, DARKGRAY);
    }

    DrawText("Pressione ENTER para continuar...", 270, 300, 20, DARKGRAY);

    if (IsKeyPressed(KEY_ENTER) && letterCount > 0)
    {
        resetaJogo();
        currentState = MENU;
    }
}

void jogoPerdido()
{
    ClearBackground(MAROON);

    const char *mensagem1 = "Os zumbis comeram seu cerebro!";
    const char *mensagem2 = "Mas nao tema, eh sempre chance para tentar novamente.";
    DrawText(mensagem1, 250, 180, 20, WHITE);
    DrawText(mensagem2, 150, 210, 20, WHITE);

    const char *mensagem3 = "Caso deseje jogar novamente, PRESSIONE R.";
    const char *mensagem4 = "Caso deseje voltar para o menu, PRESSIONE M.";
    DrawText(mensagem3, 200, 270, 20, WHITE);
    DrawText(mensagem4, 187, 300, 20, WHITE);

    if (IsKeyPressed(KEY_M))
    {
        resetaJogo();
        currentState = MENU;
    }

    if (IsKeyPressed(KEY_R))
    {
        resetaJogo();
        currentState = JOGANDO;
    }
}

void desenharJogando()
{
    ClearBackground(RAYWHITE);

    SetWindowSize(((ALTURA_GRADE * 9) + 200), ((LARGURA_GRADE * 5) + 200));

    int larguraTotalGrade = COLUNAS * ALTURA_GRADE;
    int alturaTotalGrade = LINHAS * LARGURA_GRADE;

    int valorMedioX = (GetScreenWidth() - larguraTotalGrade) / 2;
    int valorMedioY = (GetScreenHeight() - alturaTotalGrade) / 2;
    int i, j, x, y;

    // desenha as linhas verticais
    for (i = 0; i <= COLUNAS; i++)
    {
        x = valorMedioX + i * ALTURA_GRADE;
        DrawLine(x, valorMedioY, x, valorMedioY + alturaTotalGrade, BLACK);
    }

    // desenha as linhas horizontais
    for (j = 0; j <= LINHAS; j++)
    {
        y = valorMedioY + j * LARGURA_GRADE;
        DrawLine(valorMedioX, y, valorMedioX + larguraTotalGrade, y, BLACK);
    }

    // desenha os quadrados em si, al?m de colocar cada quadrado em uma matriz de Quadrados para referencia futura
    for (int i = 0; i < COLUNAS; i++)
    {
        for (int j = 0; j < LINHAS; j++)
        {

            quadradosNaTela[j][i].quadrado = (Rectangle){
                valorMedioX + i * ALTURA_GRADE,
                valorMedioY + j * LARGURA_GRADE,
                ALTURA_GRADE - 1,
                LARGURA_GRADE - 1};

            if ((i + j) % 2)
            {
                DrawRectangleRec(quadradosNaTela[j][i].quadrado, DARKGREEN);
            }
            else
            {
                DrawRectangleRec(quadradosNaTela[j][i].quadrado, LIME);
            }

            if (quadradosNaTela[j][i].estaSelecionado)
            {
                DrawRectangleLinesEx(quadradosNaTela[j][i].quadrado, 2, RED);
            }
        }
    }

    // seleciona ou desmarca o quadrado
    if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
    {
        checaColisaoQuadrado();
    }

    // aparece a solzinho
    if (IsKeyPressed(KEY_ONE))
    {
        verificaPlantaSunFlower();
    }

    // aparece a peashooter
    if (IsKeyPressed(KEY_TWO))
    {
        verificaPlantaPeaShooter();
    }

    // para fins de teste, gera um zumbi
    if (IsKeyPressed(KEY_Z))
    {
        spawnarZumbi();
    }

    // para fins de teste, termina o jogo (GANHA)
    if (IsKeyPressed(KEY_V))
    {
        vitoria = true;
        currentState = FIM_DE_JOGO;
    }

    // para fins de teste, termina o jogo (PERDE)
    if (IsKeyPressed(KEY_L))
    {
        vitoria = false;
        currentState = FIM_DE_JOGO;
    }
}

int main(void)
{
    InitWindow(1280, 600, "INF VS Zombies");

    SetTargetFPS(60);

    inicializaQuadrados();

    while (!WindowShouldClose())
    {
        BeginDrawing();

        switch (currentState)
        {
        case MENU:
            ClearBackground(RAYWHITE);
            desenharMenuPrincipal();
            break;

        case JOGANDO:
            ClearBackground(RAYWHITE);

            desenharJogando();

            desenharPlantas();
            desenharProjeteis();
            desenharZumbis();

            atualizarPlantas();
            atualizarProjeteis();
            atualizarZumbis();

            // troca pro pausaMenu caso estesa seja apertado M
            if (IsKeyPressed(KEY_M))
            {
                currentState = PAUSADO;
            }
            break;

        case PAUSADO:
            ClearBackground(RAYWHITE);
            pausaMenu();
            break;

        case TABELA_LIDER:
            ClearBackground(RAYWHITE);
            // a fazer
            break;

        case FIM_DE_JOGO: // para quando perder (GANHAR OU PERDER)
            ClearBackground(RAYWHITE);
            if (vitoria == true)
            {
                jogoGanho();
            }
            else
            {
                jogoPerdido();
            }
        }

        EndDrawing();
    }

    CloseWindow();

    return 0;
}
